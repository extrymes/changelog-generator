#!/bin/bash

# Configure bash options
set -o pipefail

# Configure colors
RESET="\033[0m"; BOLD="\033[1m"; GRAY="\033[30m"; RED="\033[31m"; GREEN="\033[32m"; YELLOW="\033[33m"; BLUE="\033[34m"; CYAN="\033[36m"; ORANGE="\033[38;5;208m"

# Set gch version
gch_version="1.0.1"

# Print sucess message
function print_success() {
	echo -e "${GREEN}success: ${1}${RESET}"
}

# Print warn message
function print_warn() {
	echo -e "${ORANGE}warn: ${1}${RESET}"
}

# Throw error
function throw_error() {
	echo -e "${RED}error: ${1}${RESET}"
	exit 1
}

# Ask user
function ask_user() {
	echo -ne "${CYAN}${1} ${GRAY}(${2})${RESET} "
}

# Check if git command exists
command -v git &> /dev/null || throw_error "git is not installed (https://git-scm.com/downloads)"

# Check if jq command exists
command -v jq &> /dev/null || throw_error "jq is not installed (https://jqlang.github.io/jq/download)"

# Get gch last version
gch_last_version=$(curl -s https://api.github.com/repos/extrymes/changelog-generator/releases/latest | jq -r .tag_name)

# Check if new gch release is available
if [[ "$gch_version" < "$gch_last_version" ]]; then
	echo -e "${GREEN}New gch release available! ($gch_version --> $gch_last_version)${RESET}"
	echo -e "Run: ${GRAY}bash -c 'bash <(curl -s https://raw.githubusercontent.com/extrymes/changelog-generator/main/install.sh)'${RESET}\n"
fi

# Get gch dir
gch_dir=$(dirname "$0")

# Get config file
config_file="$gch_dir/config.json"
[ -f "$config_file" ] || throw_error "file ${config_file} not found"

# Get remote repository URL (without SSH protocol and .git extension)
repo_url=$(git remote get-url origin 2> /dev/null | sed 's/^git@/https:\/\//' | sed 's/\.com:/\.com\//' | sed 's/\.git$//')
[ -n "$repo_url" ] || throw_error "remote repository URL not found"

# Get last tagged version and total commits count
last_version=$(git describe --tags --abbrev=0 2> /dev/null)
total_commits_count=$(git rev-list ${last_version:+${last_version}...}HEAD --no-merges --count)

# Check if commits exist
[ "$total_commits_count" -gt 0 ] || throw_error "no commit found ${last_version:+from ${last_version} }to HEAD"

# Get output file
output_file=$(jq -r ".output_file" "$config_file")
[[ -z "$output_file" || "$output_file" == "null" ]] && print_warn "output file not found in config file" && output_file="CHANGELOG.md"
echo -e "${YELLOW}Output file:${RESET} ${output_file}"

# Ask user to choose another output file
ask_user "Choose another file ?" "press [Enter] to skip"
read -r another_output_file
[ -n "$another_output_file" ] && output_file="$another_output_file"

# Create output file if does not exist
if ! [ -f "$output_file" ]; then
	touch "$output_file" || throw_error "failed to create ${output_file} file"
	print_success "new file ${output_file} created"
fi

# Check write permission for output file
[ -w "$output_file" ] || throw_error "no permission to write to ${output_file} file"

# Clean up output file
> "$output_file" || throw_error "failed to write to ${output_file} file"

# Initialize global variables
total_commits_written_count=0; major_update=false; minor_update=false; commit_types_regex=""

# Print output file
echo -e "\n${YELLOW}Writing to file:${RESET} ${output_file}"
echo "------------------------------------------------"

# Get commit types
commit_types=($(jq -r ".commit_types[].type" "$config_file" 2> /dev/null))
[[ -z "$commit_types" || "$commit_types" == "null" ]] && throw_error "commit types not found in config file"

# Iterate through commit types, search for section commits and add each commit type to regex
for commit_type in "${commit_types[@]}"; do
	# Get section
	section=$(jq -r ".commit_types[] | select(.type == \"$commit_type\") | .section" "$config_file")
	[[ -z "$section" || "$section" == "null" ]] && print_warn "${commit_type} section not found in config file" && section="$commit_type"
	section_commits=$(git log ${last_version:+${last_version}...}HEAD --no-merges --pretty=format:'%h %s' --reverse | grep -Ei "^[[:alnum:]]{7} ${commit_type}(\(.+\))?(:|!:).+")
	section_commits_written_count=0
	printf "%-25s${GRAY}--> ${section_commits_written_count} commit(s) written${RESET}" "$section"
	if [ -n "$section_commits" ]; then
		echo -e "\n## ${section}" >> "$output_file" || throw_error "failed to write to ${output_file} file"
		# Iterate through commits, extract data and write to output file
		while read -r commit; do
			commit_hash=$(echo "$commit" | cut -d ' ' -f1)
			commit_content=$(echo "$commit" | cut -d ' ' -f2-)
			commit_scope=$(echo "$commit_content" | cut -d ':' -f1 | awk -F '[()]' '{print $2}' | sed 's/^ *//; s/ *$//')
			commit_message=$(echo "$commit_content" | cut -d ':' -f2- | sed 's/^ *//' | awk '{print toupper(substr($0, 1, 1)) substr($0, 2)}')
			commit_body=$(git log -n 1 --pretty=format:'%b' "$commit_hash")
			commit_refs=$(echo "$commit_body" | grep -o '#[0-9]\+' | tr '\n' ',' | sed 's/,$//')
			commit_break=$(echo "$commit_content" | grep "^${commit_type}${commit_scope:+(.\+)}!:" || echo "$commit_body" | grep -i "breaking change:.\+")
			commit_entry="- ${commit_break:+[⚠] }${commit_scope:+**${commit_scope}:** }${commit_message} ${commit_refs:+(${commit_refs}) }([${commit_hash}](${repo_url}/commit/${commit_hash}))"
			echo "$commit_entry" >> "$output_file" || throw_error "failed to write to ${output_file} file"
			if [ -n "$commit_break" ]; then
				breaking_changes=$(echo "$commit_body" | grep -oi 'breaking change:.\+' | sed 's/^breaking change: */	- \*\*BREAKING CHANGE:\*\* /gi')
				if [ -n "$breaking_changes" ]; then
					echo "$breaking_changes" >> "$output_file" || throw_error "failed to write to ${output_file} file"
				fi
				major_update=true
			elif [ "$commit_type" == "feat" ]; then
				minor_update=true
			fi
			((total_commits_written_count++))
			((section_commits_written_count++))
			printf "\r%-25s${BLUE}--> ${section_commits_written_count} commit(s) written${RESET}" "$section"
		done <<< "$section_commits"
	fi
	printf "\n"
	commit_types_regex+="${commit_types_regex:+|}${commit_type}"
done

# Search for unconventional commits
nc_commits=$(git log ${last_version:+${last_version}...}HEAD --no-merges --pretty=format:'%h %s' --reverse | grep -Eiv "^[[:alnum:]]{7} (${commit_types_regex})(\(.+\))?(:|!:).+")
if [ -n "$nc_commits" ]; then
	nc_section="Unconventional commits"
	nc_commits_written_count=0
	printf "${GRAY}%-25s--> ${nc_commits_written_count} commit(s) written${RESET}" "${nc_section}"
	echo -e "\n## ${nc_section}" >> "$output_file" || throw_error "failed to write to ${output_file} file"
	# Iterate through unconventional commits, extract data and write to output file
	while read -r commit; do
		commit_hash=$(echo "$commit" | cut -d ' ' -f1)
		commit_content=$(echo "$commit" | cut -d ' ' -f2-)
		commit_entry="- ${commit_content} ([${commit_hash}](${repo_url}/commit/${commit_hash}))"
		echo "$commit_entry" >> "$output_file" || throw_error "failed to write to ${output_file} file"
		((total_commits_written_count++))
		((nc_commits_written_count++))
		printf "\r${RED}%-25s--> ${nc_commits_written_count} commit(s) written${RESET}" "$nc_section"
	done <<< "$nc_commits"
	printf "\n"
fi

# Print total commits written count / total commits count
echo "------------------------------------------------"
echo -e "Total: $( [ "$total_commits_written_count" -eq "$total_commits_count" ] && echo -e "${GREEN}" || echo -e "${RED}")${total_commits_written_count}/${total_commits_count} commit(s) written${RESET}\n"

# Detect new version (if last version does not exist, new version is set as the initial version)
if [ -n "$last_version" ]; then
	if [ "$major_update" == true ]; then
		new_version=$(echo "$last_version" | awk -F '.' -v OFS='.' '{$1++; $2=0; $3=0; print}')
		echo -e "${YELLOW}MAJOR UPDATE detected:${RESET} ${last_version} --> ${new_version}"
	elif [ "$minor_update" == true ]; then
		new_version=$(echo "$last_version" | awk -F '.' -v OFS='.' '{$2++; $3=0; print}')
		echo -e "${YELLOW}MINOR UPDATE detected:${RESET} ${last_version} --> ${new_version}"
	else
		new_version=$(echo "$last_version" | awk -F '.' -v OFS='.' '{$3++; print}')
		echo -e "${YELLOW}PATCH UPDATE detected:${RESET} ${last_version} --> ${new_version}"
	fi
else
	new_version=$(jq -r ".initial_version" "$config_file")
	[[ -z "$new_version" || "$new_version" == "null" ]] && print_warn "initial version not found in config file" && new_version="0.1.0"
	echo -e "${YELLOW}FIRST UPDATE detected:${RESET} ${new_version}"
fi

# Ask user to choose another version
ask_user "Choose another version?" "press [Enter] to skip"
read -r another_version
[ -n "$another_version" ] && new_version="$another_version"

# Write changelog title at beginning of output file
title_entry="# Release $([ -n "$last_version" ] && echo "[${new_version}](${repo_url}/compare/${last_version}...${new_version})" || echo "${new_version}") ($(date +'%Y-%m-%d'))"
echo "$title_entry" | cat - "$output_file" > temp && mv temp "$output_file" || throw_error "failed to write to ${output_file} file"
print_success "new changelog ${new_version} generated"

# Ask user to bump version
ask_user "Bump version?" "[Y/n]"
read -n 1 -r bump_version
if ! [[ $bump_version =~ ^[Nn]$ ]]; then
	bump_commit_entry="bump: version ${last_version:+${last_version} → }${new_version}"
	if git add "$output_file" && git commit "$output_file" -m "$bump_commit_entry" > /dev/null && git tag "$new_version"; then
		print_success "version bumped ${last_version:+from ${last_version} }to ${new_version}"
	else
		print_warn "failed to bump version"
	fi
fi

# Exit script
exit 0
